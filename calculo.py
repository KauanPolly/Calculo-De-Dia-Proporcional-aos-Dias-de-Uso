# -*- coding: utf-8 -*-
"""CalculoProp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UBUzKeteWblW3Q2zGqONPrD9joId2J-A
"""

import tkinter as tk
from tkinter import messagebox

# Dicionário com os valores dos planos de internet e rádio
planos = {
    1: {"nome": "400 Mega", "valor": 89.90},
    2: {"nome": "500 Mega", "valor": 99.90},
    3: {"nome": "600 Mega", "valor": 109.90},
    4: {"nome": "700 Mega", "valor": 129.90},
    5: {"nome": "800 Mega", "valor": 159.90},
    6: {"nome": "Rural - até 8 Mega", "valor": 89.90},
    7: {"nome": "Rural - até 15 Mega", "valor": 119.90},
    8: {"nome": "Plano Especial", "valor": 69.90},
    9: {"nome": "Rural - 340 Mega", "valor": 159.00},
    10: {"nome": "Rural - 500 Mega", "valor": 199.90}
}

# Função para calcular o custo proporcional por dias de uso de um plano
def calcular_custo_proporcional(plano, dias):
    valor_plano = plano['valor']

    # Condição especial para o plano "400 Mega"
    if plano['nome'] == "400 Mega":
        custo_diario = 2.99  # Definindo diretamente como 2,99 para evitar arredondamentos
    else:
        custo_diario = valor_plano / 30  # Para os outros planos, cálculo normal

    return custo_diario * dias  # Sem arredondar o resultado

# Função que calcula o custo total
def calcular():
    try:
        # Pega o valor selecionado no OptionMenu (plano_inicial_var e plano_novo_var armazenam os nomes)
        plano_inicial_nome = plano_inicial_var.get()
        plano_novo_nome = plano_novo_var.get()

        # Encontra os números correspondentes aos planos selecionados
        plano_inicial_num = [num for num, info in planos.items() if info['nome'] == plano_inicial_nome][0]
        plano_novo_num = [num for num, info in planos.items() if info['nome'] == plano_novo_nome][0]

        dias_inicial = int(entry_dias_inicial.get())
        dias_novo = int(entry_dias_novo.get())

        # Cálculo do custo proporcional de cada plano
        custo_inicial = calcular_custo_proporcional(planos[plano_inicial_num], dias_inicial)
        custo_novo = calcular_custo_proporcional(planos[plano_novo_num], dias_novo)

        valor_final = (custo_inicial + custo_novo)

        # Exibir os resultados sem arredondamento
        resultado_texto = (
            f"Você usou o plano {plano_inicial_nome} por {dias_inicial} dias.\n"
            f"Você usou o plano {plano_novo_nome} por {dias_novo} dias.\n"
            f"Valor por dia do plano {plano_inicial_nome}: R$ {2.99 if plano_inicial_nome == '400 Mega' else round(planos[plano_inicial_num]['valor'] / 30, 6)}\n"
            f"Valor por dia do plano {plano_novo_nome}: R$ {2.99 if plano_novo_nome == '400 Mega' else round(planos[plano_novo_num]['valor'] / 30, 6)}\n"
            f"Custo total para o plano {plano_inicial_nome}: R$ {custo_inicial}\n"
            f"Custo total para o plano {plano_novo_nome}: R$ {custo_novo}\n"
            f"\nCusto total combinado: R$ {valor_final}"
        )
        messagebox.showinfo("Resultado", resultado_texto)

    except ValueError:
        messagebox.showerror("Erro", "Por favor, insira números válidos.")

# Configuração da janela principal
root = tk.Tk()
root.title("Calculadora de Planos de Internet")
root.geometry("500x350")

# Opções para o OptionMenu (mostrando os nomes dos planos)
plano_opcoes = [info['nome'] for info in planos.values()]

# Variáveis para armazenar as seleções do OptionMenu (os nomes dos planos)
plano_inicial_var = tk.StringVar()
plano_inicial_var.set(plano_opcoes[0])  # Define valor padrão

plano_novo_var = tk.StringVar()
plano_novo_var.set(plano_opcoes[0])  # Define valor padrão

# Labels e campos de entrada para o plano inicial
tk.Label(root, text="Plano Inicial").grid(row=0, column=0, padx=10, pady=10)
plano_inicial_menu = tk.OptionMenu(root, plano_inicial_var, *plano_opcoes)
plano_inicial_menu.grid(row=0, column=1)

tk.Label(root, text="Dias do Plano Inicial").grid(row=1, column=0, padx=10, pady=10)
entry_dias_inicial = tk.Entry(root)
entry_dias_inicial.grid(row=1, column=1)

# Labels e campos de entrada para o plano novo
tk.Label(root, text="Plano Novo").grid(row=2, column=0, padx=10, pady=10)
plano_novo_menu = tk.OptionMenu(root, plano_novo_var, *plano_opcoes)
plano_novo_menu.grid(row=2, column=1)

tk.Label(root, text="Dias do Plano Novo").grid(row=3, column=0, padx=10, pady=10)
entry_dias_novo = tk.Entry(root)
entry_dias_novo.grid(row=3, column=1)

# Botão para calcular
tk.Button(root, text="Calcular", command=calcular).grid(row=4, column=1, padx=10, pady=10)

# Inicia o loop principal da janela
root.mainloop()